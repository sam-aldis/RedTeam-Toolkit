{"id":"WSWv","dependencies":[{"name":"/home/sam/Projects/RedTeamToolkit/src/package.json","includedInParent":true,"mtime":1572374864130},{"name":"/home/sam/Projects/RedTeamToolkit/src/node_modules/highlight.js/package.json","includedInParent":true,"mtime":1572358746000}],"generated":{"js":"module.exports=function(e){return{keywords:{keyword:\"_ as at cofix else end exists exists2 fix for forall fun if IF in let match mod Prop return Set then Type using where with Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture Conjectures Constant constr Constraint Constructors Context Corollary CreateHintDb Cut Declare Defined Definition Delimit Dependencies DependentDerive Drop eauto End Equality Eval Example Existential Existentials Existing Export exporting Extern Extract Extraction Fact Field Fields File Fixpoint Focus for From Function Functional Generalizable Global Goal Grab Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident Identity If Immediate Implicit Import Include Inductive Infix Info Initial Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation Obligations Opaque Open Optimize Options Parameter Parameters Parametric Path Paths pattern Polymorphic Preterm Print Printing Program Projections Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused Unfold Universe Universes Unset Unshelve using Variable Variables Variant Verbose Visibility where with\",built_in:\"abstract absurd admit after apply as assert assumption at auto autorewrite autounfold before bottom btauto by case case_eq cbn cbv change classical_left classical_right clear clearbody cofix compare compute congruence constr_eq constructor contradict contradiction cut cutrewrite cycle decide decompose dependent destruct destruction dintuition discriminate discrR do double dtauto eapply eassumption eauto ecase econstructor edestruct ediscriminate eelim eexact eexists einduction einjection eleft elim elimtype enough equality erewrite eright esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail field field_simplify field_simplify_eq first firstorder fix fold fourier functional generalize generalizing gfail give_up has_evar hnf idtac in induction injection instantiate intro intro_pattern intros intuition inversion inversion_clear is_evar is_var lapply lazy left lia lra move native_compute nia nsatz omega once pattern pose progress proof psatz quote record red refine reflexivity remember rename repeat replace revert revgoals rewrite rewrite_strat right ring ring_simplify rtauto set setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve specialize split split_Rabs split_Rmult stepl stepr subst sum swap symmetry tactic tauto time timeout top transitivity trivial try tryif unfold unify until using vm_compute with\"},contains:[e.QUOTE_STRING_MODE,e.COMMENT(\"\\\\(\\\\*\",\"\\\\*\\\\)\"),e.C_NUMBER_MODE,{className:\"type\",excludeBegin:!0,begin:\"\\\\|\\\\s*\",end:\"\\\\w+\"},{begin:/[-=]>/}]}};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":1,"column":0},"generated":{"line":1,"column":7}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":1,"column":0},"generated":{"line":1,"column":15}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":1,"column":0},"generated":{"line":1,"column":24}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":2,"column":0},"generated":{"line":1,"column":27}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":2,"column":0},"generated":{"line":1,"column":33}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":3,"column":0},"generated":{"line":1,"column":34}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":3,"column":0},"generated":{"line":1,"column":43}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":4,"column":0},"generated":{"line":1,"column":44}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":5,"column":0},"generated":{"line":1,"column":52}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":30,"column":0},"generated":{"line":1,"column":1831}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":31,"column":0},"generated":{"line":1,"column":1840}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":53,"column":0},"generated":{"line":1,"column":3273}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":53,"column":0},"generated":{"line":1,"column":3282}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":54,"column":0},"generated":{"line":1,"column":3283}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":54,"column":0},"generated":{"line":1,"column":3285}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":55,"column":0},"generated":{"line":1,"column":3303}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":55,"column":0},"generated":{"line":1,"column":3305}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":55,"column":0},"generated":{"line":1,"column":3313}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":55,"column":0},"generated":{"line":1,"column":3322}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":56,"column":0},"generated":{"line":1,"column":3332}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":56,"column":0},"generated":{"line":1,"column":3334}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":57,"column":0},"generated":{"line":1,"column":3348}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":58,"column":0},"generated":{"line":1,"column":3349}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":58,"column":0},"generated":{"line":1,"column":3359}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":59,"column":0},"generated":{"line":1,"column":3366}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":59,"column":0},"generated":{"line":1,"column":3380}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":60,"column":0},"generated":{"line":1,"column":3382}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":60,"column":0},"generated":{"line":1,"column":3388}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":61,"column":0},"generated":{"line":1,"column":3398}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":61,"column":0},"generated":{"line":1,"column":3402}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":63,"column":0},"generated":{"line":1,"column":3410}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":63,"column":0},"generated":{"line":1,"column":3411}},{"source":"node_modules/highlight.js/lib/languages/coq.js","original":{"line":63,"column":0},"generated":{"line":1,"column":3417}}],"sources":{"node_modules/highlight.js/lib/languages/coq.js":"module.exports = function(hljs) {\n  return {\n    keywords: {\n      keyword:\n        '_ as at cofix else end exists exists2 fix for forall fun if IF in let ' +\n        'match mod Prop return Set then Type using where with ' +\n        'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +\n        'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +\n        'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +\n        'Conjectures Constant constr Constraint Constructors Context Corollary ' +\n        'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent' +\n        'Derive Drop eauto End Equality Eval Example Existential Existentials ' +\n        'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +\n        'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +\n        'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +\n        'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +\n        'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +\n        'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +\n        'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +\n        'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +\n        'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +\n        'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +\n        'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +\n        'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +\n        'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +\n        'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +\n        'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +\n        'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +\n        'Verbose Visibility where with',\n      built_in:\n        'abstract absurd admit after apply as assert assumption at auto autorewrite ' +\n        'autounfold before bottom btauto by case case_eq cbn cbv change ' +\n        'classical_left classical_right clear clearbody cofix compare compute ' +\n        'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +\n        'cycle decide decompose dependent destruct destruction dintuition ' +\n        'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +\n        'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +\n        'einjection eleft elim elimtype enough equality erewrite eright ' +\n        'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +\n        'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +\n        'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +\n        'induction injection instantiate intro intro_pattern intros intuition ' +\n        'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +\n        'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +\n        'record red refine reflexivity remember rename repeat replace revert ' +\n        'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +\n        'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +\n        'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +\n        'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +\n        'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +\n        'unfold unify until using vm_compute with'\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'type',\n        excludeBegin: true,\n        begin: '\\\\|\\\\s*',\n        end: '\\\\w+'\n      },\n      {begin: /[-=]>/} // relevance booster\n    ]\n  };\n};"},"lineCount":null}},"error":null,"hash":"0b03c115f222b222381d60ee6b7bb88b","cacheData":{"env":{}}}