{"id":"../node_modules/marked-ts/dist/block-lexer.js","dependencies":[{"name":"/home/sam/Projects/RedTeamToolkit/src/package.json","includedInParent":true,"mtime":1572423157857},{"name":"/home/sam/Projects/RedTeamToolkit/src/node_modules/marked-ts/package.json","includedInParent":true,"mtime":1572380758975},{"name":"./marked","loc":{"line":20,"column":23},"parent":"/home/sam/Projects/RedTeamToolkit/src/node_modules/marked-ts/dist/block-lexer.js","resolved":"/home/sam/Projects/RedTeamToolkit/src/node_modules/marked-ts/dist/marked.js"},{"name":"./extend-regexp","loc":{"line":21,"column":30},"parent":"/home/sam/Projects/RedTeamToolkit/src/node_modules/marked-ts/dist/block-lexer.js","resolved":"/home/sam/Projects/RedTeamToolkit/src/node_modules/marked-ts/dist/extend-regexp.js"},{"name":"./interfaces","loc":{"line":22,"column":27},"parent":"/home/sam/Projects/RedTeamToolkit/src/node_modules/marked-ts/dist/block-lexer.js","resolved":"/home/sam/Projects/RedTeamToolkit/src/node_modules/marked-ts/dist/interfaces.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n *\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n *\n * Copyright (c) 2018, Костя Третяк. (MIT Licensed)\n * https://github.com/KostyaTretyak/marked-ts\n */\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar marked_1 = require(\"./marked\");\nvar extend_regexp_1 = require(\"./extend-regexp\");\nvar interfaces_1 = require(\"./interfaces\");\nvar BlockLexer = /** @class */ (function () {\n    function BlockLexer(staticThis, options) {\n        this.staticThis = staticThis;\n        this.links = {};\n        this.tokens = [];\n        this.options = options || marked_1.Marked.options;\n        this.setRules();\n    }\n    /**\n     * Accepts Markdown text and returns object with tokens and links.\n     *\n     * @param src String of markdown source to be compiled.\n     * @param options Hash of options.\n     */\n    BlockLexer.lex = function (src, options, top, isBlockQuote) {\n        var lexer = new this(this, options);\n        return lexer.getTokens(src, top, isBlockQuote);\n    };\n    BlockLexer.getRulesBase = function () {\n        if (this.rulesBase)\n            return this.rulesBase;\n        var base = {\n            newline: /^\\n+/,\n            code: /^( {4}[^\\n]+\\n*)+/,\n            hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n            heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n            lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n            blockquote: /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+/,\n            list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n            html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n            def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n            paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n            text: /^[^\\n]+/,\n            bullet: /(?:[*+-]|\\d+\\.)/,\n            item: /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/\n        };\n        base.item = new extend_regexp_1.ExtendRegexp(base.item, 'gm')\n            .setGroup(/bull/g, base.bullet)\n            .getRegexp();\n        base.list = new extend_regexp_1.ExtendRegexp(base.list)\n            .setGroup(/bull/g, base.bullet)\n            .setGroup('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n            .setGroup('def', '\\\\n+(?=' + base.def.source + ')')\n            .getRegexp();\n        var tag = '(?!(?:'\n            + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n            + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n            + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n        base.html = new extend_regexp_1.ExtendRegexp(base.html)\n            .setGroup('comment', /<!--[\\s\\S]*?-->/)\n            .setGroup('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n            .setGroup('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n            .setGroup(/tag/g, tag)\n            .getRegexp();\n        base.paragraph = new extend_regexp_1.ExtendRegexp(base.paragraph)\n            .setGroup('hr', base.hr)\n            .setGroup('heading', base.heading)\n            .setGroup('lheading', base.lheading)\n            .setGroup('blockquote', base.blockquote)\n            .setGroup('tag', '<' + tag)\n            .setGroup('def', base.def)\n            .getRegexp();\n        return this.rulesBase = base;\n    };\n    BlockLexer.getRulesGfm = function () {\n        if (this.rulesGfm)\n            return this.rulesGfm;\n        var base = this.getRulesBase();\n        var gfm = __assign({}, base, {\n            fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n            paragraph: /^/,\n            heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n        });\n        var group1 = gfm.fences.source.replace('\\\\1', '\\\\2');\n        var group2 = base.list.source.replace('\\\\1', '\\\\3');\n        gfm.paragraph = new extend_regexp_1.ExtendRegexp(base.paragraph)\n            .setGroup('(?!', \"(?!\" + group1 + \"|\" + group2 + \"|\")\n            .getRegexp();\n        return this.rulesGfm = gfm;\n    };\n    BlockLexer.getRulesTable = function () {\n        if (this.rulesTables)\n            return this.rulesTables;\n        return this.rulesTables = __assign({}, this.getRulesGfm(), {\n            nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n            table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n        });\n    };\n    BlockLexer.prototype.setRules = function () {\n        if (this.options.gfm) {\n            if (this.options.tables) {\n                this.rules = this.staticThis.getRulesTable();\n            }\n            else {\n                this.rules = this.staticThis.getRulesGfm();\n            }\n        }\n        else {\n            this.rules = this.staticThis.getRulesBase();\n        }\n        this.hasRulesGfm = this.rules.fences !== undefined;\n        this.hasRulesTables = this.rules.table !== undefined;\n    };\n    /**\n     * Lexing.\n     */\n    BlockLexer.prototype.getTokens = function (src, top, isBlockQuote) {\n        var nextPart = src;\n        var execArr;\n        mainLoop: while (nextPart) {\n            // newline\n            if (execArr = this.rules.newline.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                if (execArr[0].length > 1) {\n                    this.tokens.push({ type: interfaces_1.TokenType.space });\n                }\n            }\n            // code\n            if (execArr = this.rules.code.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var code = execArr[0].replace(/^ {4}/gm, '');\n                this.tokens.push({\n                    type: interfaces_1.TokenType.code,\n                    text: !this.options.pedantic ? code.replace(/\\n+$/, '') : code\n                });\n                continue;\n            }\n            // fences code (gfm)\n            if (this.hasRulesGfm\n                && (execArr = this.rules.fences.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({\n                    type: interfaces_1.TokenType.code,\n                    lang: execArr[2],\n                    text: execArr[3] || ''\n                });\n                continue;\n            }\n            // heading\n            if (execArr = this.rules.heading.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({\n                    type: interfaces_1.TokenType.heading,\n                    depth: execArr[1].length,\n                    text: execArr[2]\n                });\n                continue;\n            }\n            // table no leading pipe (gfm)\n            if (top\n                && this.hasRulesTables\n                && (execArr = this.rules.nptable.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var item = {\n                    type: interfaces_1.TokenType.table,\n                    header: execArr[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n                    align: execArr[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n                    cells: []\n                };\n                for (var i = 0; i < item.align.length; i++) {\n                    if (/^ *-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'right';\n                    }\n                    else if (/^ *:-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'center';\n                    }\n                    else if (/^ *:-+ *$/.test(item.align[i])) {\n                        item.align[i] = 'left';\n                    }\n                    else {\n                        item.align[i] = null;\n                    }\n                }\n                var td = execArr[3].replace(/\\n$/, '').split('\\n');\n                for (var i = 0; i < td.length; i++) {\n                    item.cells[i] = td[i].split(/ *\\| */);\n                }\n                this.tokens.push(item);\n                continue;\n            }\n            // lheading\n            if (execArr = this.rules.lheading.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({\n                    type: interfaces_1.TokenType.heading,\n                    depth: execArr[2] === '=' ? 1 : 2,\n                    text: execArr[1]\n                });\n                continue;\n            }\n            // hr\n            if (execArr = this.rules.hr.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({ type: interfaces_1.TokenType.hr });\n                continue;\n            }\n            // blockquote\n            if (execArr = this.rules.blockquote.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({ type: interfaces_1.TokenType.blockquoteStart });\n                var str = execArr[0].replace(/^ *> ?/gm, '');\n                // Pass `top` to keep the current\n                // \"toplevel\" state. This is exactly\n                // how markdown.pl works.\n                this.getTokens(str);\n                this.tokens.push({ type: interfaces_1.TokenType.blockquoteEnd });\n                continue;\n            }\n            // list\n            if (execArr = this.rules.list.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var bull = execArr[2];\n                this.tokens.push({ type: interfaces_1.TokenType.listStart, ordered: bull.length > 1 });\n                // Get each top-level item.\n                var str = execArr[0].match(this.rules.item);\n                var length_1 = str.length;\n                var next = false, space = void 0, blockBullet = void 0, loose = void 0;\n                for (var i = 0; i < length_1; i++) {\n                    var item = str[i];\n                    // Remove the list item's bullet so it is seen as the next token.\n                    space = item.length;\n                    item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n                    // Outdent whatever the list item contains. Hacky.\n                    if (item.indexOf('\\n ') !== -1) {\n                        space -= item.length;\n                        item = !this.options.pedantic\n                            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n                            : item.replace(/^ {1,4}/gm, '');\n                    }\n                    // Determine whether the next list item belongs here.\n                    // Backpedal if it does not belong in this list.\n                    if (this.options.smartLists && i !== length_1 - 1) {\n                        blockBullet = this.staticThis.getRulesBase().bullet.exec(str[i + 1])[0];\n                        if (bull !== blockBullet && !(bull.length > 1 && blockBullet.length > 1)) {\n                            nextPart = str.slice(i + 1).join('\\n') + nextPart;\n                            i = length_1 - 1;\n                        }\n                    }\n                    // Determine whether item is loose or not.\n                    // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n                    // for discount behavior.\n                    loose = next || /\\n\\n(?!\\s*$)/.test(item);\n                    if (i !== length_1 - 1) {\n                        next = item.charAt(item.length - 1) === '\\n';\n                        if (!loose)\n                            loose = next;\n                    }\n                    this.tokens.push({ type: loose ? interfaces_1.TokenType.looseItemStart : interfaces_1.TokenType.listItemStart });\n                    // Recurse.\n                    this.getTokens(item, false, isBlockQuote);\n                    this.tokens.push({ type: interfaces_1.TokenType.listItemEnd });\n                }\n                this.tokens.push({ type: interfaces_1.TokenType.listEnd });\n                continue;\n            }\n            // html\n            if (execArr = this.rules.html.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var attr = execArr[1];\n                var isPre = (attr === 'pre' || attr === 'script' || attr === 'style');\n                this.tokens.push({\n                    type: this.options.sanitize ? interfaces_1.TokenType.paragraph : interfaces_1.TokenType.html,\n                    pre: !this.options.sanitizer && isPre,\n                    text: execArr[0]\n                });\n                continue;\n            }\n            // def\n            if (top && (execArr = this.rules.def.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.links[execArr[1].toLowerCase()] =\n                    {\n                        href: execArr[2],\n                        title: execArr[3]\n                    };\n                continue;\n            }\n            // table (gfm)\n            if (top\n                && this.hasRulesTables\n                && (execArr = this.rules.table.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var item = {\n                    type: interfaces_1.TokenType.table,\n                    header: execArr[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n                    align: execArr[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n                    cells: []\n                };\n                for (var i = 0; i < item.align.length; i++) {\n                    if (/^ *-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'right';\n                    }\n                    else if (/^ *:-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'center';\n                    }\n                    else if (/^ *:-+ *$/.test(item.align[i])) {\n                        item.align[i] = 'left';\n                    }\n                    else {\n                        item.align[i] = null;\n                    }\n                }\n                var td = execArr[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n');\n                for (var i = 0; i < td.length; i++) {\n                    item.cells[i] = td[i]\n                        .replace(/^ *\\| *| *\\| *$/g, '')\n                        .split(/ *\\| */);\n                }\n                this.tokens.push(item);\n                continue;\n            }\n            // simple rules\n            if (this.staticThis.simpleRules.length) {\n                var simpleRules = this.staticThis.simpleRules;\n                for (var i = 0; i < simpleRules.length; i++) {\n                    if (execArr = simpleRules[i].exec(nextPart)) {\n                        nextPart = nextPart.substring(execArr[0].length);\n                        var type = 'simpleRule' + (i + 1);\n                        this.tokens.push({ type: type, execArr: execArr });\n                        continue mainLoop;\n                    }\n                }\n            }\n            // top-level paragraph\n            if (top && (execArr = this.rules.paragraph.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                if (execArr[1].slice(-1) === '\\n') {\n                    this.tokens.push({\n                        type: interfaces_1.TokenType.paragraph,\n                        text: execArr[1].slice(0, -1),\n                    });\n                }\n                else {\n                    this.tokens.push({\n                        type: this.tokens.length > 0 ? interfaces_1.TokenType.paragraph : interfaces_1.TokenType.text,\n                        text: execArr[1],\n                    });\n                }\n                continue;\n            }\n            // text\n            // Top-level should never reach here.\n            if (execArr = this.rules.text.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({ type: interfaces_1.TokenType.text, text: execArr[0] });\n                continue;\n            }\n            if (nextPart) {\n                throw new Error('Infinite loop on byte: ' + nextPart.charCodeAt(0) + (\", near text '\" + nextPart.slice(0, 30) + \"...'\"));\n            }\n        }\n        return { tokens: this.tokens, links: this.links };\n    };\n    BlockLexer.simpleRules = [];\n    return BlockLexer;\n}());\nexports.BlockLexer = BlockLexer;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/marked-ts/dist/block-lexer.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}}],"sources":{"../node_modules/marked-ts/dist/block-lexer.js":"\"use strict\";\n/**\n * @license\n *\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n *\n * Copyright (c) 2018, Костя Третяк. (MIT Licensed)\n * https://github.com/KostyaTretyak/marked-ts\n */\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar marked_1 = require(\"./marked\");\nvar extend_regexp_1 = require(\"./extend-regexp\");\nvar interfaces_1 = require(\"./interfaces\");\nvar BlockLexer = /** @class */ (function () {\n    function BlockLexer(staticThis, options) {\n        this.staticThis = staticThis;\n        this.links = {};\n        this.tokens = [];\n        this.options = options || marked_1.Marked.options;\n        this.setRules();\n    }\n    /**\n     * Accepts Markdown text and returns object with tokens and links.\n     *\n     * @param src String of markdown source to be compiled.\n     * @param options Hash of options.\n     */\n    BlockLexer.lex = function (src, options, top, isBlockQuote) {\n        var lexer = new this(this, options);\n        return lexer.getTokens(src, top, isBlockQuote);\n    };\n    BlockLexer.getRulesBase = function () {\n        if (this.rulesBase)\n            return this.rulesBase;\n        var base = {\n            newline: /^\\n+/,\n            code: /^( {4}[^\\n]+\\n*)+/,\n            hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n            heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n            lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n            blockquote: /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+/,\n            list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n            html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n            def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n            paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n            text: /^[^\\n]+/,\n            bullet: /(?:[*+-]|\\d+\\.)/,\n            item: /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/\n        };\n        base.item = new extend_regexp_1.ExtendRegexp(base.item, 'gm')\n            .setGroup(/bull/g, base.bullet)\n            .getRegexp();\n        base.list = new extend_regexp_1.ExtendRegexp(base.list)\n            .setGroup(/bull/g, base.bullet)\n            .setGroup('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n            .setGroup('def', '\\\\n+(?=' + base.def.source + ')')\n            .getRegexp();\n        var tag = '(?!(?:'\n            + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n            + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n            + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n        base.html = new extend_regexp_1.ExtendRegexp(base.html)\n            .setGroup('comment', /<!--[\\s\\S]*?-->/)\n            .setGroup('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n            .setGroup('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n            .setGroup(/tag/g, tag)\n            .getRegexp();\n        base.paragraph = new extend_regexp_1.ExtendRegexp(base.paragraph)\n            .setGroup('hr', base.hr)\n            .setGroup('heading', base.heading)\n            .setGroup('lheading', base.lheading)\n            .setGroup('blockquote', base.blockquote)\n            .setGroup('tag', '<' + tag)\n            .setGroup('def', base.def)\n            .getRegexp();\n        return this.rulesBase = base;\n    };\n    BlockLexer.getRulesGfm = function () {\n        if (this.rulesGfm)\n            return this.rulesGfm;\n        var base = this.getRulesBase();\n        var gfm = __assign({}, base, {\n            fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n            paragraph: /^/,\n            heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n        });\n        var group1 = gfm.fences.source.replace('\\\\1', '\\\\2');\n        var group2 = base.list.source.replace('\\\\1', '\\\\3');\n        gfm.paragraph = new extend_regexp_1.ExtendRegexp(base.paragraph)\n            .setGroup('(?!', \"(?!\" + group1 + \"|\" + group2 + \"|\")\n            .getRegexp();\n        return this.rulesGfm = gfm;\n    };\n    BlockLexer.getRulesTable = function () {\n        if (this.rulesTables)\n            return this.rulesTables;\n        return this.rulesTables = __assign({}, this.getRulesGfm(), {\n            nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n            table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n        });\n    };\n    BlockLexer.prototype.setRules = function () {\n        if (this.options.gfm) {\n            if (this.options.tables) {\n                this.rules = this.staticThis.getRulesTable();\n            }\n            else {\n                this.rules = this.staticThis.getRulesGfm();\n            }\n        }\n        else {\n            this.rules = this.staticThis.getRulesBase();\n        }\n        this.hasRulesGfm = this.rules.fences !== undefined;\n        this.hasRulesTables = this.rules.table !== undefined;\n    };\n    /**\n     * Lexing.\n     */\n    BlockLexer.prototype.getTokens = function (src, top, isBlockQuote) {\n        var nextPart = src;\n        var execArr;\n        mainLoop: while (nextPart) {\n            // newline\n            if (execArr = this.rules.newline.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                if (execArr[0].length > 1) {\n                    this.tokens.push({ type: interfaces_1.TokenType.space });\n                }\n            }\n            // code\n            if (execArr = this.rules.code.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var code = execArr[0].replace(/^ {4}/gm, '');\n                this.tokens.push({\n                    type: interfaces_1.TokenType.code,\n                    text: !this.options.pedantic ? code.replace(/\\n+$/, '') : code\n                });\n                continue;\n            }\n            // fences code (gfm)\n            if (this.hasRulesGfm\n                && (execArr = this.rules.fences.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({\n                    type: interfaces_1.TokenType.code,\n                    lang: execArr[2],\n                    text: execArr[3] || ''\n                });\n                continue;\n            }\n            // heading\n            if (execArr = this.rules.heading.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({\n                    type: interfaces_1.TokenType.heading,\n                    depth: execArr[1].length,\n                    text: execArr[2]\n                });\n                continue;\n            }\n            // table no leading pipe (gfm)\n            if (top\n                && this.hasRulesTables\n                && (execArr = this.rules.nptable.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var item = {\n                    type: interfaces_1.TokenType.table,\n                    header: execArr[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n                    align: execArr[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n                    cells: []\n                };\n                for (var i = 0; i < item.align.length; i++) {\n                    if (/^ *-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'right';\n                    }\n                    else if (/^ *:-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'center';\n                    }\n                    else if (/^ *:-+ *$/.test(item.align[i])) {\n                        item.align[i] = 'left';\n                    }\n                    else {\n                        item.align[i] = null;\n                    }\n                }\n                var td = execArr[3].replace(/\\n$/, '').split('\\n');\n                for (var i = 0; i < td.length; i++) {\n                    item.cells[i] = td[i].split(/ *\\| */);\n                }\n                this.tokens.push(item);\n                continue;\n            }\n            // lheading\n            if (execArr = this.rules.lheading.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({\n                    type: interfaces_1.TokenType.heading,\n                    depth: execArr[2] === '=' ? 1 : 2,\n                    text: execArr[1]\n                });\n                continue;\n            }\n            // hr\n            if (execArr = this.rules.hr.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({ type: interfaces_1.TokenType.hr });\n                continue;\n            }\n            // blockquote\n            if (execArr = this.rules.blockquote.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({ type: interfaces_1.TokenType.blockquoteStart });\n                var str = execArr[0].replace(/^ *> ?/gm, '');\n                // Pass `top` to keep the current\n                // \"toplevel\" state. This is exactly\n                // how markdown.pl works.\n                this.getTokens(str);\n                this.tokens.push({ type: interfaces_1.TokenType.blockquoteEnd });\n                continue;\n            }\n            // list\n            if (execArr = this.rules.list.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var bull = execArr[2];\n                this.tokens.push({ type: interfaces_1.TokenType.listStart, ordered: bull.length > 1 });\n                // Get each top-level item.\n                var str = execArr[0].match(this.rules.item);\n                var length_1 = str.length;\n                var next = false, space = void 0, blockBullet = void 0, loose = void 0;\n                for (var i = 0; i < length_1; i++) {\n                    var item = str[i];\n                    // Remove the list item's bullet so it is seen as the next token.\n                    space = item.length;\n                    item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n                    // Outdent whatever the list item contains. Hacky.\n                    if (item.indexOf('\\n ') !== -1) {\n                        space -= item.length;\n                        item = !this.options.pedantic\n                            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n                            : item.replace(/^ {1,4}/gm, '');\n                    }\n                    // Determine whether the next list item belongs here.\n                    // Backpedal if it does not belong in this list.\n                    if (this.options.smartLists && i !== length_1 - 1) {\n                        blockBullet = this.staticThis.getRulesBase().bullet.exec(str[i + 1])[0];\n                        if (bull !== blockBullet && !(bull.length > 1 && blockBullet.length > 1)) {\n                            nextPart = str.slice(i + 1).join('\\n') + nextPart;\n                            i = length_1 - 1;\n                        }\n                    }\n                    // Determine whether item is loose or not.\n                    // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n                    // for discount behavior.\n                    loose = next || /\\n\\n(?!\\s*$)/.test(item);\n                    if (i !== length_1 - 1) {\n                        next = item.charAt(item.length - 1) === '\\n';\n                        if (!loose)\n                            loose = next;\n                    }\n                    this.tokens.push({ type: loose ? interfaces_1.TokenType.looseItemStart : interfaces_1.TokenType.listItemStart });\n                    // Recurse.\n                    this.getTokens(item, false, isBlockQuote);\n                    this.tokens.push({ type: interfaces_1.TokenType.listItemEnd });\n                }\n                this.tokens.push({ type: interfaces_1.TokenType.listEnd });\n                continue;\n            }\n            // html\n            if (execArr = this.rules.html.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var attr = execArr[1];\n                var isPre = (attr === 'pre' || attr === 'script' || attr === 'style');\n                this.tokens.push({\n                    type: this.options.sanitize ? interfaces_1.TokenType.paragraph : interfaces_1.TokenType.html,\n                    pre: !this.options.sanitizer && isPre,\n                    text: execArr[0]\n                });\n                continue;\n            }\n            // def\n            if (top && (execArr = this.rules.def.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.links[execArr[1].toLowerCase()] =\n                    {\n                        href: execArr[2],\n                        title: execArr[3]\n                    };\n                continue;\n            }\n            // table (gfm)\n            if (top\n                && this.hasRulesTables\n                && (execArr = this.rules.table.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                var item = {\n                    type: interfaces_1.TokenType.table,\n                    header: execArr[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n                    align: execArr[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n                    cells: []\n                };\n                for (var i = 0; i < item.align.length; i++) {\n                    if (/^ *-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'right';\n                    }\n                    else if (/^ *:-+: *$/.test(item.align[i])) {\n                        item.align[i] = 'center';\n                    }\n                    else if (/^ *:-+ *$/.test(item.align[i])) {\n                        item.align[i] = 'left';\n                    }\n                    else {\n                        item.align[i] = null;\n                    }\n                }\n                var td = execArr[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n');\n                for (var i = 0; i < td.length; i++) {\n                    item.cells[i] = td[i]\n                        .replace(/^ *\\| *| *\\| *$/g, '')\n                        .split(/ *\\| */);\n                }\n                this.tokens.push(item);\n                continue;\n            }\n            // simple rules\n            if (this.staticThis.simpleRules.length) {\n                var simpleRules = this.staticThis.simpleRules;\n                for (var i = 0; i < simpleRules.length; i++) {\n                    if (execArr = simpleRules[i].exec(nextPart)) {\n                        nextPart = nextPart.substring(execArr[0].length);\n                        var type = 'simpleRule' + (i + 1);\n                        this.tokens.push({ type: type, execArr: execArr });\n                        continue mainLoop;\n                    }\n                }\n            }\n            // top-level paragraph\n            if (top && (execArr = this.rules.paragraph.exec(nextPart))) {\n                nextPart = nextPart.substring(execArr[0].length);\n                if (execArr[1].slice(-1) === '\\n') {\n                    this.tokens.push({\n                        type: interfaces_1.TokenType.paragraph,\n                        text: execArr[1].slice(0, -1),\n                    });\n                }\n                else {\n                    this.tokens.push({\n                        type: this.tokens.length > 0 ? interfaces_1.TokenType.paragraph : interfaces_1.TokenType.text,\n                        text: execArr[1],\n                    });\n                }\n                continue;\n            }\n            // text\n            // Top-level should never reach here.\n            if (execArr = this.rules.text.exec(nextPart)) {\n                nextPart = nextPart.substring(execArr[0].length);\n                this.tokens.push({ type: interfaces_1.TokenType.text, text: execArr[0] });\n                continue;\n            }\n            if (nextPart) {\n                throw new Error('Infinite loop on byte: ' + nextPart.charCodeAt(0) + (\", near text '\" + nextPart.slice(0, 30) + \"...'\"));\n            }\n        }\n        return { tokens: this.tokens, links: this.links };\n    };\n    BlockLexer.simpleRules = [];\n    return BlockLexer;\n}());\nexports.BlockLexer = BlockLexer;\n"},"lineCount":380}},"error":null,"hash":"de9712940d30a6cb453abd0ed5bec549","cacheData":{"env":{}}}